#!/usr/bin/env python

# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
import threading
import time
import random
import math
import datetime
import rospy
from geometry_msgs.msg import Twist
import sys, select, os
if os.name == 'nt':
  import msvcrt
else:
  import tty, termios

#BURGER_MAX_LIN_VEL = 0.22
#BURGER_MAX_ANG_VEL = 2.84

BURGER_MAX_LIN_VEL = 0.11
BURGER_MAX_ANG_VEL = 1.42

WAFFLE_MAX_LIN_VEL = 0.26
WAFFLE_MAX_ANG_VEL = 1.82

LIN_VEL_STEP_SIZE = 0.01
ANG_VEL_STEP_SIZE = 0.1

msg = """
Control Your TurtleBot3!
---------------------------
Moving around:
        w
   a    s    d
        x

w/x : increase/decrease linear velocity (Burger : ~ 0.22, Waffle and Waffle Pi : ~ 0.26)
a/d : increase/decrease angular velocity (Burger : ~ 2.84, Waffle and Waffle Pi : ~ 1.82)

space key, s : force stop

CTRL-C to quit
"""

e = """
Communications Failed
"""

def getKey():
    if os.name == 'nt':
      return msvcrt.getch()

    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    #print('Test')
    return key

def vels(next_direction,target_linear_vel, target_angular_vel):
    return "currently:\t%s\tlinear vel %s\t angular vel %s " % (next_direction,target_linear_vel,target_angular_vel)

def makeSimpleProfile(output, input, slop):
    if input > output:
        output = min( input, output + slop )
    elif input < output:
        output = max( input, output - slop )
    else:
        output = input

    return output

def constrain(input, low, high):
    if input < low:
      input = low
    elif input > high:
      input = high
    else:
      input = input

    return input

def checkLinearLimitVelocity(vel):
    if turtlebot3_model == "burger":
      vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)
    elif turtlebot3_model == "waffle" or turtlebot3_model == "waffle_pi":
      vel = constrain(vel, -WAFFLE_MAX_LIN_VEL, WAFFLE_MAX_LIN_VEL)
    else:
      vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)

    return vel

def checkAngularLimitVelocity(vel):
    if turtlebot3_model == "burger":
      vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)
    elif turtlebot3_model == "waffle" or turtlebot3_model == "waffle_pi":
      vel = constrain(vel, -WAFFLE_MAX_ANG_VEL, WAFFLE_MAX_ANG_VEL)
    else:
      vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)

    return vel

class RepeatTimer(threading.Thread):
    def __init__(self, event, duration, func):
        threading.Thread.__init__(self)
        self.stopped = event
        self.duration = duration
        self.func = func

    def run(self):
        while not self.stopped.wait(self.duration):
            #print("my thread")
            self.func
            # call a function

next_direction = ['q','w','e','a','d','z','x','c']
def getNextDirection():
    return random.choice(next_direction)
    
status = 0
target_linear_vel   = 0.0
target_angular_vel  = 0.0
control_linear_vel  = 0.0
control_angular_vel = 0.0


#def setNextDirection(key):
#    global status
#    global target_linear_vel   
#    global target_angular_vel  
#    global control_linear_vel  
#    global control_angular_vel 
#    if key == 'w' :
#        target_linear_vel = checkLinearLimitVelocity(target_linear_vel + LIN_VEL_STEP_SIZE)
#        status = status + 1
#        print(vels(key,target_linear_vel,target_angular_vel))
#    elif key == 'x' :
#        target_linear_vel = checkLinearLimitVelocity(target_linear_vel - LIN_VEL_STEP_SIZE)
#        status = status + 1
#        print(vels(key,target_linear_vel,target_angular_vel))
#    elif key == 'a' :
#        target_angular_vel = checkAngularLimitVelocity(target_angular_vel + ANG_VEL_STEP_SIZE)
#        status = status + 1
#        print(vels(key,target_linear_vel,target_angular_vel))
#    elif key == 'd' :
#        target_angular_vel = checkAngularLimitVelocity(target_angular_vel - ANG_VEL_STEP_SIZE)
#        status = status + 1
#        print(vels(key,target_linear_vel,target_angular_vel))
#    elif key == ' ' or key == 's' :
#        target_linear_vel   = 0.0
#        control_linear_vel  = 0.0
#        target_angular_vel  = 0.0
#        control_angular_vel = 0.0
#        print(vels(key,target_linear_vel, target_angular_vel))
#    else:
#        if (key == '\x03'):
#            return -1
#
#    return 1

if __name__=="__main__":
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('random_controllor')
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)

    turtlebot3_model = rospy.get_param("model", "burger")


    #stopFlag = threading.Event()
    #thread = RepeatTimer(stopFlag,auto_duration,setNextDirection( getNextDirection() ) )
    #thread.start()

    auto_duration = 5000
    
    start_time = datetime.datetime.now()

    last_direction = 's'
    now_direction = getNextDirection()
    
    try:
        print(msg)
        while(1):
            end_time = datetime.datetime.now()
            time_diff = (end_time - start_time)
            delta_time = time_diff.total_seconds() * 1000

            key = 's'
            if(delta_time >= auto_duration):
                key = getNextDirection()
            else:
                key = getKey()
            
            if(key in next_direction and key != last_direction):
                print('Next Direction ' + key)
                last_direction = key

            #TODO : Support key 's' to stop Turtlebot

            if key in next_direction:
                now_direction = key 
                start_time = datetime.datetime.now()    
            else:
                if (key == '\x03'):
                    break

            twist = Twist()

            if now_direction == 'q' :
                if(delta_time <= math.pi/(8*BURGER_MAX_ANG_VEL)*1000): #Rotate
                    twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
                    twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = -BURGER_MAX_ANG_VEL
                else: #Forward
                    twist.linear.x = BURGER_MAX_LIN_VEL; twist.linear.y = 0.0; twist.linear.z = 0.0
                    twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
            elif now_direction == 'w' :
                twist.linear.x = BURGER_MAX_LIN_VEL; twist.linear.y = 0.0; twist.linear.z = 0.0
                twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
            elif now_direction == 'e' :
                if(delta_time <= math.pi/(8*BURGER_MAX_ANG_VEL)*1000): #Rotate
                    twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
                    twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = BURGER_MAX_ANG_VEL
                else: #Forward
                    twist.linear.x = BURGER_MAX_LIN_VEL; twist.linear.y = 0.0; twist.linear.z = 0.0
                    twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
            elif now_direction == 'a' :
                if(delta_time <= math.pi/(4*BURGER_MAX_ANG_VEL)*1000): #Rotate
                    twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
                    twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = -BURGER_MAX_ANG_VEL
                else: #Forward
                    twist.linear.x = BURGER_MAX_LIN_VEL; twist.linear.y = 0.0; twist.linear.z = 0.0
                    twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
            elif now_direction == 's' :
                twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
                twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
            elif now_direction == 'd' :
                if(delta_time <= math.pi/(4*BURGER_MAX_ANG_VEL)*1000): #Rotate
                    twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0;
                    twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = BURGER_MAX_ANG_VEL
                else: #Forward
                    twist.linear.x = BURGER_MAX_LIN_VEL; twist.linear.y = 0.0; twist.linear.z = 0.0
                    twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
            elif now_direction == 'z' :
                if(delta_time <= math.pi/(8*BURGER_MAX_ANG_VEL)*1000): #Rotate
                    twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
                    twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = BURGER_MAX_ANG_VEL
                else: #Forward
                    twist.linear.x = -BURGER_MAX_LIN_VEL; twist.linear.y = 0.0; twist.linear.z = 0.0
                    twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
            elif now_direction == 'x' :
                twist.linear.x = -BURGER_MAX_LIN_VEL; twist.linear.y = 0.0; twist.linear.z = 0.0
                twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
            elif now_direction == 'c' :
                if(delta_time <= math.pi/(8*BURGER_MAX_ANG_VEL)*1000): #Rotate
                    twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
                    twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = BURGER_MAX_ANG_VEL
                else: #Forward
                    twist.linear.x = -BURGER_MAX_LIN_VEL; twist.linear.y = 0.0; twist.linear.z = 0.0
                    twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
            #rtv = setNextDirection(key)

            pub.publish(twist)


            #if rtv == -1 : 
            #    break


            #if status == 20 :
            #    print(msg)
            #    status = 0

                
            #twist = Twist()

            #control_linear_vel = makeSimpleProfile(control_linear_vel, target_linear_vel, (LIN_VEL_STEP_SIZE/2.0))
            #twist.linear.x = control_linear_vel; twist.linear.y = 0.0; twist.linear.z = 0.0

            #control_angular_vel = makeSimpleProfile(control_angular_vel, target_angular_vel, (ANG_VEL_STEP_SIZE/2.0))
            #twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = control_angular_vel


            #time.sleep(auto_duration)
    except Exception as err:
        print(err.message)
    

    finally:
        twist = Twist()
        twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
        twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
        pub.publish(twist)

    if os.name != 'nt':
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
