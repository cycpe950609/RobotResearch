#!/usr/bin/env python2
# coding=utf-8
# We must add this line , otherwise python will raise error in runtime(default encoding is ASCII)
import rospy
import motion_stable_control.msg
from sensor_msgs.msg import LaserScan
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Point,Twist
from tf.transformations import euler_from_quaternion
import actionlib
from math import pi,cos,sin,sqrt
import threading
import numpy as np
import sys
# Other modules of ActionServer
from Go2GoalTwist import Go2GoalTwist
from AvoidObstacleTwist import AvoidObstacleTwist
from FollowWallTwist import FollowWallClockwiseTwist,FollowWallCounterClockwiseTwist
from Logger import LOG
from Constant import *
from DirectionArrow import DirectionArrow
from LaserScanSim import LaserScanSim

class Go2GoalAction(object):
    # create messages that are used to publish feedback/result
    g2g_feedback = motion_stable_control.msg.Go2GoalFeedback()
    g2g_result = motion_stable_control.msg.Go2GoalResult()
    isGo2Goal = False
    GoalOfRobot = Point(0,0,0)
    g2g_cv = threading.Condition()
    ao_twist_cv = threading.Condition()
    shutdown_cv = threading.Condition()


    def __init__(self, name):
        self._is_shutdown = False
        rospy.loginfo("Init RobotNavigationServer")
        self.dis_sub = rospy.Subscriber('scan', LaserScan, self.getDistanceCallback)
        self.avoid_obstacle_twist = Twist()
        self.avoid_obstacle_twist.linear.x = 0.0
        self.avoid_obstacle_twist.linear.y = 0.0
        self.avoid_obstacle_twist.linear.z = 0.0
        self.avoid_obstacle_twist.angular.x = 0.0
        self.avoid_obstacle_twist.angular.y = 0.0
        self.avoid_obstacle_twist.angular.z = 0.0
        self.obstacle_distance = float("inf")
        self.obstacle_degree = 0.0
        self.direction = 0.0
        self.last_direction = 0.0

        self.ObstacleInRobot2Goal = False
        self.LaserScanMsg = LaserScanSim()

        self.go2goal_twist = Go2GoalTwist()# We should put this before subscript to /odom,so that we wont have no go2goal_twist error
        self.ao_twist = AvoidObstacleTwist()
        self.fw_cw_twist = FollowWallClockwiseTwist()
        self.fw_ccw_twist = FollowWallCounterClockwiseTwist()

        self.ao_direction = DirectionArrow('avoid_obstacle_direction')
        self.fw_direction = DirectionArrow('follow_wall_direction')
        self._fw_direction = 0.0
        self.g2g_direction = DirectionArrow('go_to_goal_direction')
        self.ao_direction = DirectionArrow('avoid_obstacle_direction')

        self._as = actionlib.SimpleActionServer(name, motion_stable_control.msg.Go2GoalAction, execute_cb=self.execute_cb, auto_start = False)
        self._as.start()

        self.last_time = rospy.Time.now()


        rospy.loginfo("Robot Navigation Server Start Success")

        self.state = "GO2GOALSTATE"

        self.follow_wall_choosen = 'NONE'
        self.last_distance_to_goal = 0.0
    
        self.laser_sim_pub = rospy.Publisher('laser_scan_sim', LaserScan, queue_size=10)
        self.odom_sub = rospy.Subscriber('odom',Odometry,self.getPoseCallback)
        self.new_twist = rospy.Publisher('cmd_vel', Twist, queue_size=10)

    def _initTwist(self):
        rtv = Twist()
        rtv.linear.x = 0.0
        rtv.linear.y = 0.0
        rtv.linear.z = 0.0

        rtv.angular.x = 0.0
        rtv.angular.y = 0.0
        rtv.angular.z = 0.0
        return rtv
    
    def EuclideanDistance( self, p1 ,p2):
        dx = p1.x - p2.x
        dy = p1.y - p2.y
        dz = p1.z - p2.z
        return sqrt( dx*dx + dy*dy + dz*dz )

    def Shutdown(self):
        # Unregister subscripter first , so that we wont get topic after shutdown the ActionServer
        # 未知原因在Ctrl+C 關閉robot_navigation之後，會有機會產生ROSException: publish() to a closed topic
        self.odom_sub.unregister()
        self.dis_sub.unregister()# TODO: Test is this actually can fix ROSException ?
        if(self.isGo2Goal == True):
            self._is_shutdown = True
            while(self._is_shutdown == True):
                try:
                    self.shutdown_cv.acquire()
                    self.shutdown_cv.wait()
                finally:
                    self.shutdown_cv.release()
        rospy.loginfo("Go2Goal Server END")

    def execute_cb(self, goal):
        self.isGo2Goal = True

        self.go2goal_twist.updateGoal(goal)
        
        LOG.LogFunction('execute_cb_getGoal')

        rospy.loginfo("Get goal ( %lf , %lf , %lf )"%(goal.Goal.x , goal.Goal.y , goal.Goal.z))

        while(self.isGo2Goal == True):
            try:
                self.g2g_cv.acquire()
                self.g2g_cv.wait()
            finally:
                self.g2g_cv.release()        

    def getDistanceCallback(self,msg): # Callback of Lidar

        LOG.LogFunction('getDistanceCallback')

        LOG.Log('LaserScan','At getDistanceCallback',msg)

        now_time = rospy.Time.now()
        self.last_duration = self.last_time - now_time
        self.last_time = now_time
        self.last_direction = self.direction
        
        self.LaserScanMsg.updateLaserScan(msg)
        self.ao_twist.updateLaserScan(self.LaserScanMsg)
        self.fw_cw_twist.updateLaserScan(self.LaserScanMsg)
        self.fw_ccw_twist.updateLaserScan(self.LaserScanMsg)

        self.obstacle_distance = min(msg.ranges) # min
        self.obstacle_degree = ( msg.angle_min + msg.ranges.index( self.obstacle_distance )*msg.angle_increment )

    def getNthSmallNumberOfList(self,list,index):# index is start from 1 
        list.sort()
        return list[index-1]

    def getPoseCallback(self,msg):

        LOG.LogFunction('getPoseCallback')

        # Update Pose for twist
        self.go2goal_twist.updatePose(msg.pose.pose)
        self.ao_twist.updatePose(msg.pose.pose)
        self.fw_cw_twist.updatePose(msg.pose.pose)
        self.fw_ccw_twist.updatePose(msg.pose.pose)

        # Update Pose for DirectionArrow
        self.ao_direction.updatePose(msg.pose.pose)
        self.g2g_direction.updatePose(msg.pose.pose)
        self.fw_direction.updatePose(msg.pose.pose)

        # Update LaserScanMsg
        self.LaserScanMsg.updateLaserScanWithPose(msg.pose.pose)
        self.ao_twist.updateLaserScan(self.LaserScanMsg)
        self.fw_cw_twist.updateLaserScan(self.LaserScanMsg)
        self.fw_ccw_twist.updateLaserScan(self.LaserScanMsg)
        
        # Get Euler Angle from Quaternion
        (r, p, yaw) = euler_from_quaternion([msg.pose.pose.orientation.x, msg.pose.pose.orientation.y, msg.pose.pose.orientation.z, msg.pose.pose.orientation.w])
        self.direction = yaw

        # Publish LaserScanSim
        if(not self._is_shutdown):
            self.laser_sim_pub.publish(self.LaserScanMsg)

        
        # goal_distance = self.EuclideanDistance(self.GoalOfRobot , msg.pose.pose.position)
        goal_distance = self.go2goal_twist.getDistance()

        if(self.isGo2Goal):
            self.g2g_feedback.Position = msg.pose.pose.position
            self._as.publish_feedback(self.g2g_feedback)

            if(goal_distance <= DistanceError): # // Arrive goal
                # rospy.loginfo("Go2Goal Success")
                LOG.LogFunction('is_arrive_goal')
                g2g_twist = self._initTwist()

                self._as.set_succeeded(self.g2g_result)

                self.g2g_cv.acquire()
                self.isGo2Goal = False
                self.g2g_cv.notify()
                self.g2g_cv.release()

                self.new_twist.publish(g2g_twist)

                rospy.loginfo("Arrive Goal")
            elif(self._is_shutdown):
                # LOG.LogFunction('is_shutdown_requested')
                self._as.set_aborted()
                self.g2g_cv.acquire()
                self.isGo2Goal = False
                self.g2g_cv.notify()
                self.g2g_cv.release()
                g2g_twist = self._initTwist()
    
                self.new_twist.publish(g2g_twist)
                rospy.loginfo('is_shutdown_requested')

                # Reset State
                self.state = 'GO2GOALSTATE'
                self.follow_wall_choosen = 'NONE'

                self.shutdown_cv.acquire()
                self._is_shutdown = False
                self.shutdown_cv.notify()
                self.shutdown_cv.release()


            elif (self._as.is_preempt_requested() ):
                LOG.LogFunction('is_preempt_requested')

                self._as.set_preempted()
                self.g2g_cv.acquire()
                self.isGo2Goal = False
                self.g2g_cv.notify()
                self.g2g_cv.release()
                g2g_twist = self._initTwist()
                self.new_twist.publish(g2g_twist)

                # Reset State
                self.state = 'GO2GOALSTATE'
                self.follow_wall_choosen = 'NONE'

            else :
                # Avoid Obstacle Direction
                # Avoid Obstacle
                avoid_obstacle_twist = self.ao_twist.getTwist()
                u_ao = np.array([ [ avoid_obstacle_twist.linear.x ] 
                                , [ avoid_obstacle_twist.angular.z ] ])

                self.ao_direction.publish(self.obstacle_degree + self.direction + pi)



                # Follow Wall Direction

                avoid_obstacle_twist = self.ao_twist.getTwist()
                # Go2Goal
                goal_direction = self.go2goal_twist.getDirection()
                goal_vector = [ cos(goal_direction + pi/2) , sin(goal_direction + pi/2)  ]

                u_g2g = np.transpose(goal_vector)
                # Go2Goal Direction
                self.g2g_direction.publish(goal_direction)
                
                # Follow Wall
                alpha = 1
                # Clockwise
                u_fw_c = alpha * np.array([ [0,1],[-1,0] ]).dot(u_ao)
                # CounterClockwise
                u_fw_cc = alpha * np.array([ [0,-1],[1,0] ]).dot(u_ao)

                # inner product of Follow Wall and Go2Goal
                ip_c = np.transpose(u_g2g).dot(u_fw_c)
                ip_cc = np.transpose(u_g2g).dot(u_fw_cc)

                twist = self._initTwist()

                #region SOME_COMMENT
                # Next State   
                # if distance between turtlbot3 and goal is smaller than obstacle , Go2Goal first  
                # 每秒更新機器人的位置30次
                # 因為每次更新機器人的位置中間機器人會移動，所以只要機器人往Goal前進，distance(goal,location) < last_distance一定會成立
                # 故follow_wall_choosen == None不會成立
                # 也就是機器人會一直維持在Go2GoalState  
                # ==> 已解決，我們只在FollowWallState時判斷就不會發生只在Go2GoalState
                # NOTE: 仍會回到Go2GoalSTate之後又回到FollowWallState結果往相反方向移動或卡住
                #endregion
                
                FollowWallDistance = ( WarningDistance + DangerDistance )/2

                if(self.obstacle_distance <= FollowWallDistance):
                # if(self.obstacle_distance <= WarningDistance ):
                    if(self.obstacle_distance <= DangerDistance):
                        if(self.state != 'AVOID_OBSTACLE_STATE' ):
                            print("From state %s to AVOID_OBSTACLE_STATE"%self.state)
                        self.state = 'AVOID_OBSTACLE_STATE'
                        self.follow_wall_choosen = 'NONE'

                    #region GO_BACK_TO_GO2GOALSTATE_COMMENT
                    # TODO: When in FOLLOW_WALL state , what conditions to go back to Go2GoalState ?
                    #       1. There is no obstacle between Goal and Turtlebot3
                    #       2. There is no obstacle before Turtlebot3
                    #       3. Turtlebot3 go to another size of obstacle
                    #       4. If current distance from Turtlebot to Goal is smaller than last time
                    #endregion
                    elif(self.follow_wall_choosen == 'NONE'):
                        if(ip_c > 0.0):
                            if(self.state != 'FOLLOW_CLOCKWISE'):
                                rospy.loginfo("From state %s to FOLLOW_CLOCKWISE"%self.state)

                            self.last_distance_to_goal = self.EuclideanDistance(self.GoalOfRobot , msg.pose.pose.position)
                            self.follow_wall_choosen = "CLOCKWISE"
                            self.state = "FOLLOW_CLOCKWISE"

                        elif(ip_cc > 0.0):
                            if(self.state != 'FOLLOW_COUNTER_CLOCKWISE'):
                                rospy.loginfo("From state %s to FOLLOW_COUNTER_CLOCKWISE"%self.state)

                            self.last_distance_to_goal = self.EuclideanDistance(self.GoalOfRobot , msg.pose.pose.position)
                            self.follow_wall_choosen = "COUNTER_CLOCKWISE"
                            self.state = 'FOLLOW_COUNTER_CLOCKWISE'
                    else:
                        current_distant_to_goal = self.EuclideanDistance(self.GoalOfRobot , msg.pose.pose.position)
                        if(self.follow_wall_choosen == "CLOCKWISE"):
                            if(self.state != 'FOLLOW_CLOCKWISE'):
                                rospy.loginfo("From state %s to FOLLOW_CLOCKWISE"%self.state)

                            if(current_distant_to_goal < self.last_distance_to_goal):
                                # Get Next state
                                if(self.obstacle_distance <= FollowWallDistance ):
                                    self.state = 'FOLLOW_CLOCKWISE'
                                else:
                                    self.state = 'GO2GOALSTATE'
                            else:
                                self.state = 'FOLLOW_CLOCKWISE'
                        else:
                            if(self.state != 'FOLLOW_COUNTER_CLOCKWISE'):
                                rospy.loginfo("From state %s to FOLLOW_COUNTER_CLOCKWISE"%self.state)
                            if(current_distant_to_goal < self.last_distance_to_goal):
                                # Get Next state
                                if(self.obstacle_distance <= FollowWallDistance ):
                                    self.state = 'FOLLOW_COUNTER_CLOCKWISE'
                                else:
                                    self.state = 'GO2GOALSTATE'
                            else:
                                self.state = 'FOLLOW_COUNTER_CLOCKWISE'
                else:
                    if(self.state != 'GO2GOALSTATE'):
                        rospy.loginfo("From state %s to GO2GOALSTATE"%self.state)
                    self.state = 'GO2GOALSTATE'

                LOG.LogString('state','Turtlebot3 state',self.state)

                if( self.state == 'GO2GOALSTATE' ):
                    twist = self.go2goal_twist.getTwist()
                    LOG.Log('Go2GoalTwist','Twist at Go2Goal State',twist)
                elif( self.state == 'FOLLOW_CLOCKWISE' ):
                    twist = self.fw_cw_twist.getTwist()
                    LOG.Log('FollowWallClockwiseTwist','Twist at FollowWall Clockwise State',twist)
                    self._fw_direction = self.fw_cw_twist.getDirection()
                elif( self.state == 'AVOID_OBSTACLE_STATE' ):
                    twist = self.ao_twist.getTwist()
                    LOG.Log('AvoidObstacleTwist','Twist at AvoidObstacle State',twist)
                elif( self.state == 'FOLLOW_COUNTER_CLOCKWISE' ):
                    twist = self.fw_ccw_twist.getTwist()
                    LOG.Log('FollowWallCounterClockwiseTwist','Twist at FollowWall Counter Clockwise State',twist)
                    self._fw_direction = self.fw_ccw_twist.getDirection()

                self.fw_direction.publish(self._fw_direction)
                self.new_twist.publish(twist)

def shutdown_handler():
    rospy.loginfo("Get shutdown interrupt !")
    rospy.loginfo("Wait for server end")
    server.Shutdown()
    rospy.loginfo("Server ended")
    LOG.close()
    rospy.loginfo("Finish shutdown, byebye ~")
    sys.exit(0)

if __name__ == '__main__':
    rospy.init_node('robot_navigation')
    server = Go2GoalAction('Go2GoalAction')
    # print "Test"
    rospy.on_shutdown(shutdown_handler)
    rospy.spin()
